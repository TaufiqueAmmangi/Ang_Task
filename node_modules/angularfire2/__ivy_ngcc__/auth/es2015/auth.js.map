{"version":3,"file":"auth.js","sources":["../../../../src/auth/auth.ts"],"names":[],"mappings":"AACA,OAAO,eAAe,CAAC;AACvB,OAAO,EAAE,UAAU,EAAU,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAE1D,OAAO,6BAA6B,CAAC;AACrC,OAAO,wBAAwB,CAAC;AAChC,OAAO,iCAAiC,CAAC;;;AAGzC,MAAM;AACN,IAgBE,YAAmB,GAAgB;AACrC,QADqB,QAAG,GAAH,GAAG,CAAa;AAAC,QAClC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;AAC3B,QACI,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,UAAU;AAChD,YAAM,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;AACnE,YAAM,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC;AAC7B,SAAK,CAAC,CAAC;AACP,QAAI,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AACjF,QACI,MAAM,QAAQ,GAAG,IAAI,UAAU,CAAqB,UAAU;AAClE,YAAM,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACjE,YAAM,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC;AAC7B,SAAK,CAAC,CAAC,SAAS,CAAC,IAAI;AACrB,YAAM,MAAM,CAAC,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAA;AACnF,SAAK,CAAC,CAAC;AACP,QAAI,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;AAC7E,KAAG;AACH;2CAnCC,UAAU;6GACR;AAAC;AAGG,YAVE,WAAW;AAAK;;;4EAAE;AAAC","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { FirebaseApp, ZoneScheduler } from 'angularfire2';\n\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/fromPromise';\n\n@Injectable()\nexport class AngularFireAuth {\n\n  /**\n   * Firebase Auth instance\n   */\n  public readonly auth: firebase.auth.Auth;\n\n  /**\n   * Observable of authentication state; as of 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<firebase.User|null>;\n\n  /**\n   * Observable of the signed-in user's ID token; which includes sign-in, sign-out, and token refresh events\n   */\n  public readonly idToken: Observable<string|null>;\n\n  constructor(public app: FirebaseApp) {\n    this.auth = app.auth();\n\n    const authState$ = new Observable(subscriber => {\n      const unsubscribe = this.auth.onAuthStateChanged(subscriber);\n      return { unsubscribe };\n    });\n    this.authState = observeOn.call(authState$, new ZoneScheduler(Zone.current));\n\n    const idToken$ = new Observable<firebase.User|null>(subscriber => {\n      const unsubscribe = this.auth.onIdTokenChanged(subscriber);\n      return { unsubscribe };\n    }).switchMap(user => {\n      return user ? Observable.fromPromise(user.getIdToken()) : Observable.of(null)\n    });\n    this.idToken = observeOn.call(idToken$, new ZoneScheduler(Zone.current));\n  }\n\n}"]}