{"ast":null,"code":"import _slicedToArray from \"E:/Piu/article_ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"E:/Piu/article_ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { stateChanges } from './state-changes';\nimport { fromRef } from '../observable/fromRef';\nimport 'rxjs/add/operator/skipWhile';\nimport 'rxjs/add/operator/withLatestFrom';\nimport 'rxjs/add/operator/map';\nexport function createAuditTrail(query) {\n  return function (events) {\n    return auditTrail(query, events);\n  };\n}\nexport function auditTrail(query, events) {\n  var auditTrail$ = stateChanges(query, events).scan(function (current, action) {\n    return [].concat(_toConsumableArray(current), [action]);\n  }, []);\n  return waitForLoaded(query, auditTrail$);\n}\n\nfunction loadedData(query) {\n  return fromRef(query, 'value').map(function (data) {\n    var lastKeyToLoad;\n    data.payload.forEach(function (child) {\n      lastKeyToLoad = child.key;\n      return false;\n    });\n    return {\n      data: data,\n      lastKeyToLoad: lastKeyToLoad\n    };\n  });\n}\n\nfunction waitForLoaded(query, action$) {\n  var loaded$ = loadedData(query);\n  return loaded$.withLatestFrom(action$).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        loaded = _ref2[0],\n        actions = _ref2[1];\n\n    var lastKeyToLoad = loaded.lastKeyToLoad;\n    var loadedKeys = actions.map(function (snap) {\n      return snap.key;\n    });\n    return {\n      actions: actions,\n      lastKeyToLoad: lastKeyToLoad,\n      loadedKeys: loadedKeys\n    };\n  }).skipWhile(function (meta) {\n    return meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1;\n  }).map(function (meta) {\n    return meta.actions;\n  });\n}","map":{"version":3,"sources":["E:/Piu/article_ui/node_modules/angularfire2/__ivy_ngcc__/database/es2015/list/audit-trail.js"],"names":["stateChanges","fromRef","createAuditTrail","query","events","auditTrail","auditTrail$","scan","current","action","waitForLoaded","loadedData","map","data","lastKeyToLoad","payload","forEach","child","key","action$","loaded$","withLatestFrom","loaded","actions","loadedKeys","snap","skipWhile","meta","indexOf"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,OAAO,6BAAP;AACA,OAAO,kCAAP;AACA,OAAO,uBAAP;AACA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AACpC,SAAO,UAACC,MAAD;AAAA,WAAYC,UAAU,CAACF,KAAD,EAAQC,MAAR,CAAtB;AAAA,GAAP;AACH;AACD,OAAO,SAASC,UAAT,CAAoBF,KAApB,EAA2BC,MAA3B,EAAmC;AACtC,MAAME,WAAW,GAAGN,YAAY,CAACG,KAAD,EAAQC,MAAR,CAAZ,CACfG,IADe,CACV,UAACC,OAAD,EAAUC,MAAV;AAAA,wCAAyBD,OAAzB,IAAkCC,MAAlC;AAAA,GADU,EACiC,EADjC,CAApB;AAEA,SAAOC,aAAa,CAACP,KAAD,EAAQG,WAAR,CAApB;AACH;;AACD,SAASK,UAAT,CAAoBR,KAApB,EAA2B;AACvB,SAAOF,OAAO,CAACE,KAAD,EAAQ,OAAR,CAAP,CACFS,GADE,CACE,UAAAC,IAAI,EAAI;AACb,QAAIC,aAAJ;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAaC,OAAb,CAAqB,UAAAC,KAAK,EAAI;AAC1BH,MAAAA,aAAa,GAAGG,KAAK,CAACC,GAAtB;AACA,aAAO,KAAP;AACH,KAHD;AAIA,WAAO;AAAEL,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,aAAa,EAAbA;AAAR,KAAP;AACH,GARM,CAAP;AASH;;AACD,SAASJ,aAAT,CAAuBP,KAAvB,EAA8BgB,OAA9B,EAAuC;AACnC,MAAMC,OAAO,GAAGT,UAAU,CAACR,KAAD,CAA1B;AACA,SAAOiB,OAAO,CACTC,cADE,CACaF,OADb,EAEFP,GAFE,CAEE,gBAAuB;AAAA;AAAA,QAArBU,MAAqB;AAAA,QAAbC,OAAa;;AAC5B,QAAIT,aAAa,GAAGQ,MAAM,CAACR,aAA3B;AACA,QAAMU,UAAU,GAAGD,OAAO,CAACX,GAAR,CAAY,UAAAa,IAAI;AAAA,aAAIA,IAAI,CAACP,GAAT;AAAA,KAAhB,CAAnB;AACA,WAAO;AAAEK,MAAAA,OAAO,EAAPA,OAAF;AAAWT,MAAAA,aAAa,EAAbA,aAAX;AAA0BU,MAAAA,UAAU,EAAVA;AAA1B,KAAP;AACH,GANM,EAOFE,SAPE,CAOQ,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACH,UAAL,CAAgBI,OAAhB,CAAwBD,IAAI,CAACb,aAA7B,MAAgD,CAAC,CAArD;AAAA,GAPZ,EAQFF,GARE,CAQE,UAAAe,IAAI;AAAA,WAAIA,IAAI,CAACJ,OAAT;AAAA,GARN,CAAP;AASH","sourcesContent":["import { stateChanges } from './state-changes';\nimport { fromRef } from '../observable/fromRef';\nimport 'rxjs/add/operator/skipWhile';\nimport 'rxjs/add/operator/withLatestFrom';\nimport 'rxjs/add/operator/map';\nexport function createAuditTrail(query) {\n    return (events) => auditTrail(query, events);\n}\nexport function auditTrail(query, events) {\n    const auditTrail$ = stateChanges(query, events)\n        .scan((current, action) => [...current, action], []);\n    return waitForLoaded(query, auditTrail$);\n}\nfunction loadedData(query) {\n    return fromRef(query, 'value')\n        .map(data => {\n        let lastKeyToLoad;\n        data.payload.forEach(child => {\n            lastKeyToLoad = child.key;\n            return false;\n        });\n        return { data, lastKeyToLoad };\n    });\n}\nfunction waitForLoaded(query, action$) {\n    const loaded$ = loadedData(query);\n    return loaded$\n        .withLatestFrom(action$)\n        .map(([loaded, actions]) => {\n        let lastKeyToLoad = loaded.lastKeyToLoad;\n        const loadedKeys = actions.map(snap => snap.key);\n        return { actions, lastKeyToLoad, loadedKeys };\n    })\n        .skipWhile(meta => meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1)\n        .map(meta => meta.actions);\n}\n//# sourceMappingURL=audit-trail.js.map"]},"metadata":{},"sourceType":"module"}