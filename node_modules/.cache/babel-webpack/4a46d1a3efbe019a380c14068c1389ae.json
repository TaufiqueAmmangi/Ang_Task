{"ast":null,"code":"import { Observable } from 'rxjs/Observable';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { ZoneScheduler } from 'angularfire2';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/delay';\nimport 'rxjs/add/operator/share';\nexport function fromRef(ref, event) {\n  var listenType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'on';\n  var ref$ = new Observable(function (subscriber) {\n    var fn = ref[listenType](event, function (snapshot, prevKey) {\n      subscriber.next({\n        snapshot: snapshot,\n        prevKey: prevKey\n      });\n\n      if (listenType == 'once') {\n        subscriber.complete();\n      }\n    }, subscriber.error.bind(subscriber));\n\n    if (listenType == 'on') {\n      return {\n        unsubscribe: function unsubscribe() {\n          ref.off(event, fn);\n        }\n      };\n    } else {\n      return {\n        unsubscribe: function unsubscribe() {}\n      };\n    }\n  }).map(function (payload) {\n    var snapshot = payload.snapshot,\n        prevKey = payload.prevKey;\n    var key = null;\n\n    if (snapshot.exists()) {\n      key = snapshot.key;\n    }\n\n    return {\n      type: event,\n      payload: snapshot,\n      prevKey: prevKey,\n      key: key\n    };\n  }).delay(0);\n  return observeOn.call(ref$, new ZoneScheduler(Zone.current)).share();\n}","map":{"version":3,"sources":["E:/Piu/article_ui/node_modules/angularfire2/__ivy_ngcc__/database/es2015/observable/fromRef.js"],"names":["Observable","observeOn","ZoneScheduler","fromRef","ref","event","listenType","ref$","subscriber","fn","snapshot","prevKey","next","complete","error","bind","unsubscribe","off","map","payload","key","exists","type","delay","call","Zone","current","share"],"mappings":"AAAA,SAASA,UAAT,QAA2B,iBAA3B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,OAAO,uBAAP;AACA,OAAO,yBAAP;AACA,OAAO,yBAAP;AACA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,KAAtB,EAAgD;AAAA,MAAnBC,UAAmB,uEAAN,IAAM;AACnD,MAAMC,IAAI,GAAG,IAAIP,UAAJ,CAAe,UAAAQ,UAAU,EAAI;AACtC,QAAMC,EAAE,GAAGL,GAAG,CAACE,UAAD,CAAH,CAAgBD,KAAhB,EAAuB,UAACK,QAAD,EAAWC,OAAX,EAAuB;AACrDH,MAAAA,UAAU,CAACI,IAAX,CAAgB;AAAEF,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,OAAO,EAAPA;AAAZ,OAAhB;;AACA,UAAIL,UAAU,IAAI,MAAlB,EAA0B;AACtBE,QAAAA,UAAU,CAACK,QAAX;AACH;AACJ,KALU,EAKRL,UAAU,CAACM,KAAX,CAAiBC,IAAjB,CAAsBP,UAAtB,CALQ,CAAX;;AAMA,QAAIF,UAAU,IAAI,IAAlB,EAAwB;AACpB,aAAO;AAAEU,QAAAA,WAAF,yBAAgB;AAAEZ,UAAAA,GAAG,CAACa,GAAJ,CAAQZ,KAAR,EAAeI,EAAf;AAAqB;AAAvC,OAAP;AACH,KAFD,MAGK;AACD,aAAO;AAAEO,QAAAA,WAAF,yBAAgB,CAAG;AAAnB,OAAP;AACH;AACJ,GAbY,EAcRE,GAdQ,CAcJ,UAACC,OAAD,EAAa;AAAA,QACVT,QADU,GACYS,OADZ,CACVT,QADU;AAAA,QACAC,OADA,GACYQ,OADZ,CACAR,OADA;AAElB,QAAIS,GAAG,GAAG,IAAV;;AACA,QAAIV,QAAQ,CAACW,MAAT,EAAJ,EAAuB;AACnBD,MAAAA,GAAG,GAAGV,QAAQ,CAACU,GAAf;AACH;;AACD,WAAO;AAAEE,MAAAA,IAAI,EAAEjB,KAAR;AAAec,MAAAA,OAAO,EAAET,QAAxB;AAAkCC,MAAAA,OAAO,EAAPA,OAAlC;AAA2CS,MAAAA,GAAG,EAAHA;AAA3C,KAAP;AACH,GArBY,EAsBRG,KAtBQ,CAsBF,CAtBE,CAAb;AAuBA,SAAOtB,SAAS,CAACuB,IAAV,CAAejB,IAAf,EAAqB,IAAIL,aAAJ,CAAkBuB,IAAI,CAACC,OAAvB,CAArB,EAAsDC,KAAtD,EAAP;AACH","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { ZoneScheduler } from 'angularfire2';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/delay';\nimport 'rxjs/add/operator/share';\nexport function fromRef(ref, event, listenType = 'on') {\n    const ref$ = new Observable(subscriber => {\n        const fn = ref[listenType](event, (snapshot, prevKey) => {\n            subscriber.next({ snapshot, prevKey });\n            if (listenType == 'once') {\n                subscriber.complete();\n            }\n        }, subscriber.error.bind(subscriber));\n        if (listenType == 'on') {\n            return { unsubscribe() { ref.off(event, fn); } };\n        }\n        else {\n            return { unsubscribe() { } };\n        }\n    })\n        .map((payload) => {\n        const { snapshot, prevKey } = payload;\n        let key = null;\n        if (snapshot.exists()) {\n            key = snapshot.key;\n        }\n        return { type: event, payload: snapshot, prevKey, key };\n    })\n        .delay(0);\n    return observeOn.call(ref$, new ZoneScheduler(Zone.current)).share();\n}\n//# sourceMappingURL=fromRef.js.map"]},"metadata":{},"sourceType":"module"}