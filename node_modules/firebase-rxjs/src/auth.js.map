{"version":3,"sources":["../../../../packages/firebase-rxjs/src/auth.ts"],"names":[],"mappings":"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","file":"auth.js","sourceRoot":"","sourcesContent":["import { auth, User } from 'firebase'\nimport { Observable } from 'rxjs/Observable'\nimport { map } from 'rxjs/operator/map'\nimport { FirebaseApp } from './app'\nimport { ActionCodeInfo, AuthCredential, AuthProvider } from './interfaces'\nimport { NativeFirebaseAuth } from './native-firebase'\nimport { FirebaseUser, FirebaseUserCredential } from './user'\n\nexport class FirebaseAuth {\n\n  /**\n   * Observable which emits when authorization state of the user changes.\n   */\n  get user(): Observable<FirebaseUser | null> {\n    return map.call(\n      this.app.zoneHelper.createObservable(\n        (observer) => this.fbAuth.onAuthStateChanged(observer)\n      ),\n      (user: firebase.User) => user ? new FirebaseUser(user, this.app) : null\n    )\n  }\n\n  constructor(private fbAuth: NativeFirebaseAuth,\n              private app: FirebaseApp) {}\n\n  /**\n   * @param code\n   * @returns {Observable<void>} - Returns {@link ActionCodeError} if operation fails.\n   */\n  applyActionCode(code: string): Observable<void> {\n    return this.app.zoneHelper.wrapPromise(() => this.fbAuth.applyActionCode(code))\n  }\n\n  /**\n   * @param code\n   * @returns {Observable<ActionCodeInfo>} - Returns {@link ActionCodeError} if operation fails.\n   */\n  checkActionCode(code: string): Observable<ActionCodeInfo> {\n    return this.app.zoneHelper.wrapPromise(() => this.fbAuth.checkActionCode(code))\n  }\n\n  /**\n   * @param code\n   * @param newPassword\n   * @returns {Observable<void>} - Returns {@link ConfirmPasswordResetError} if operation fails.\n   */\n  confirmPasswordReset(code: string, newPassword: string): Observable<void> {\n    return this.app.zoneHelper.wrapPromise(() =>\n      this.fbAuth.confirmPasswordReset(code, newPassword))\n  }\n\n  /**\n   *\n   * @param email\n   * @param password\n   * @returns {Observable<FirebaseUser>} - Returns {@link CreateUserWithEmailAndPasswordError} if\n   *     operation fails.\n   */\n  createUserWithEmailAndPassword(email: string, password: string): Observable<FirebaseUser> {\n    return map.call(\n      this.app.zoneHelper.wrapPromise(() =>\n        this.fbAuth.createUserWithEmailAndPassword(email, password)),\n      (user: User) => new FirebaseUser(user, this.app)\n    )\n  }\n\n  /**\n   *\n   * @param email\n   * @returns {Observable<string[]>} - Returns {@link FetchProvidersForEmailError} if operation\n   *     fails.\n   */\n  fetchProvidersForEmail(email: string): Observable<string[]> {\n    return this.app.zoneHelper.wrapPromise(() => this.fbAuth.fetchProvidersForEmail(email))\n  }\n\n  /**\n   * @returns {Observable<FirebaseUserCredential>} - Returns {@link GetRedirectResultError} if\n   *     operation fails.\n   */\n  getRedirectResult(): Observable<FirebaseUserCredential> {\n    return map.call(\n      this.app.zoneHelper.wrapPromise(() => this.fbAuth.getRedirectResult()),\n      (cred: auth.UserCredential) => new FirebaseUserCredential(cred, this.app)\n    );\n  }\n\n  /**\n   * @param email\n   * @returns {Observable<void>} - Returns {@link SendPasswordResetEmailError} if operation fails.\n   */\n  sendPasswordResetEmail(email: string): Observable<void> {\n    return this.app.zoneHelper.wrapPromise(() => this.fbAuth.sendPasswordResetEmail(email))\n  }\n\n  /**\n   *\n   * @returns {Observable<FirebaseUser>} - Returns {@link SignInAnonymouslyError} if operation\n   *     fails.\n   */\n  signInAnonymously(): Observable<FirebaseUser> {\n    return map.call(\n      this.app.zoneHelper.wrapPromise(() => this.fbAuth.signInAnonymously()),\n      (user: User) => new FirebaseUser(user, this.app)\n    );\n  }\n\n  /**\n   * @param credential\n   * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithCredentialError} if operation\n   *     fails.\n   */\n  signInWithCredential(credential: AuthCredential): Observable<FirebaseUser> {\n    return map.call(\n      this.app.zoneHelper.wrapPromise(() => this.fbAuth.signInWithCredential(credential)),\n      (user: User) => new FirebaseUser(user, this.app)\n    );\n  }\n\n  /**\n   * @param token\n   * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithCustomTokenError} if operation\n   *     fails.\n   */\n  signInWithCustomToken(token: string): Observable<FirebaseUser> {\n    return map.call(\n      this.app.zoneHelper.wrapPromise(() => this.fbAuth.signInWithCustomToken(token)),\n      (user: User) => new FirebaseUser(user, this.app)\n    );\n  }\n\n  /**\n   * @param email\n   * @param password\n   * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithEmailAndPasswordError} if\n   *     operation fails.\n   */\n  signInWithEmailAndPassword(email: string, password: string): Observable<FirebaseUser> {\n    return map.call(\n      this.app.zoneHelper.wrapPromise(() =>\n        this.fbAuth.signInWithEmailAndPassword(email, password)),\n      (user: User) => new FirebaseUser(user, this.app)\n    )\n  }\n\n  /**\n   * @param provider\n   * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithPopupError} if operation fails.\n   */\n  signInWithPopup(provider: AuthProvider): Observable<FirebaseUserCredential> {\n    return map.call(\n      this.app.zoneHelper.wrapPromise(() => this.fbAuth.signInWithPopup(provider)),\n      (cred: auth.UserCredential) => new FirebaseUserCredential(cred, this.app)\n    );\n  }\n\n  /**\n   * @param provider\n   * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithRedirectError} if operation\n   *     fails.\n   */\n  signInWithRedirect(provider: AuthProvider): Observable<FirebaseUserCredential> {\n    return map.call(\n      this.app.zoneHelper.wrapPromise(() => this.fbAuth.signInWithRedirect(provider)),\n      (cred: auth.UserCredential) => new FirebaseUserCredential(cred, this.app)\n    );\n  }\n\n  signOut(): Observable<void> {\n    return this.app.zoneHelper.wrapPromise<void>(() => this.fbAuth.signOut())\n  }\n\n  /**\n   *\n   * @param code\n   * @returns {Observable<string>} - Returns {@link VerifyPasswordResetCodeError} if operation\n   * fails.\n   */\n  verifyPasswordResetCode(code: string): Observable<string> {\n    return this.app.zoneHelper.wrapPromise(() => this.fbAuth.verifyPasswordResetCode(code))\n  }\n}\n"]}