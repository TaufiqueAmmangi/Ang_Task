{"version":3,"sources":["../../../../packages/firebase-rxjs/src/native-firebase.ts"],"names":[],"mappings":"AAEA;IAAA;IAaA,CAAC;IAAD,wBAAC;AAAD,CAbA,AAaC,IAAA;;AAED;IAAA;IAyCA,CAAC;IAAD,yBAAC;AAAD,CAzCA,AAyCC,IAAA;;AAED;IAAA;IAUA,CAAC;IAAD,6BAAC;AAAD,CAVA,AAUC,IAAA","file":"native-firebase.js","sourceRoot":"","sourcesContent":["import { app, auth, database } from 'firebase'\n\nexport abstract class NativeFirebaseApp implements app.App {\n  name: string;\n  options: Object;\n\n  abstract auth(): firebase.auth.Auth;\n\n  abstract database(): firebase.database.Database;\n\n  abstract delete(): firebase.Promise<any>;\n\n  abstract storage(): firebase.storage.Storage;\n\n  abstract messaging(): firebase.messaging.Messaging;\n}\n\nexport abstract class NativeFirebaseAuth implements auth.Auth {\n  app: firebase.app.App;\n\n  abstract currentUser: firebase.User | null;\n\n  abstract applyActionCode(code: string): firebase.Promise<any>;\n\n  abstract checkActionCode(code: string): firebase.Promise<any>;\n\n  abstract confirmPasswordReset(code: string, newPassword: string): firebase.Promise<any>;\n\n  abstract createCustomToken(uid: string, developerClaims?: Object | null): string;\n\n  abstract createUserWithEmailAndPassword(email: string, password: string): firebase.Promise<any>;\n\n  abstract fetchProvidersForEmail(email: string): firebase.Promise<any>;\n\n  abstract getRedirectResult(): firebase.Promise<any>;\n\n  abstract onAuthStateChanged(nextOrObserver: Object, opt_error?: (a: firebase.auth.Error) => any,\n                              opt_completed?: () => any): () => any;\n\n  abstract sendPasswordResetEmail(email: string): firebase.Promise<any>;\n\n  abstract signInAnonymously(): firebase.Promise<any>;\n\n  abstract signInWithCredential(credential: firebase.auth.AuthCredential): firebase.Promise<any>;\n\n  abstract signInWithCustomToken(token: string): firebase.Promise<any>;\n\n  abstract signInWithEmailAndPassword(email: string, password: string): firebase.Promise<any>;\n\n  abstract signInWithPopup(provider: firebase.auth.AuthProvider): firebase.Promise<any>;\n\n  abstract signInWithRedirect(provider: firebase.auth.AuthProvider): firebase.Promise<any>;\n\n  abstract signOut(): firebase.Promise<any>;\n\n  abstract verifyIdToken(idToken: string): firebase.Promise<any>;\n\n  abstract verifyPasswordResetCode(code: string): firebase.Promise<any>;\n}\n\nexport abstract class NativeFirebaseDatabase implements database.Database {\n  app: firebase.app.App;\n\n  abstract goOffline(): any;\n\n  abstract goOnline(): any;\n\n  abstract ref(path?: string): firebase.database.Reference;\n\n  abstract refFromURL(url: string): firebase.database.Reference;\n}\n\nexport interface FirebaseError extends Error {\n  code: string\n  message: string\n  name: string\n  stack: string\n}\n"]}