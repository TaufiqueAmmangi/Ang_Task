import { auth, User, UserInfo } from 'firebase';
import { Observable } from 'rxjs/Observable';
import { FirebaseApp } from './app';
import { AuthCredential, UserCredential } from './interfaces';
export declare class FirebaseUserCredential {
    credential?: AuthCredential;
    user?: FirebaseUser;
    constructor(cred: UserCredential, app: FirebaseApp);
}
export declare class FirebaseUser {
    private user;
    private app;
    readonly displayName: string | null;
    readonly email: string | null;
    readonly emailVerified: boolean;
    readonly isAnonymous: boolean;
    readonly photoURL: string | null;
    readonly providerData: (UserInfo | null)[];
    readonly providerId: string;
    readonly refreshToken: string;
    readonly uid: string;
    constructor(user: User, app: FirebaseApp);
    /**
     * @returns {Observable<void>} - Returns {@link DeleteUserError} if operation fails.
     */
    delete(): Observable<void>;
    getToken(forceRefresh?: boolean): Observable<string>;
    /**
     * @returns {Observable<FirebaseUser>} - Returns {@link LinkUserError} if operation fails.
     */
    link(credential: AuthCredential): Observable<FirebaseUser>;
    /**
     * @returns {Observable<FirebaseUserCredential>} - Returns {@link LinkUserWithPopupError} if
     *     operation fails.
     */
    linkWithPopup(provider: auth.AuthProvider): Observable<FirebaseUserCredential>;
    /**
     * @returns {Observable<FirebaseUserCredential>} - Returns {@link LinkUserWithRedirectError} if
     *     operation fails.
     */
    linkWithRedirect(provider: auth.AuthProvider): Observable<FirebaseUserCredential>;
    /**
     * @returns {Observable<void>} - Returns {@link ReauthenticateError} if operation
     * fails.
     */
    reauthenticate(credential: AuthCredential): Observable<void>;
    reload(): Observable<void>;
    sendEmailVerification(): Observable<void>;
    unlink(providerId: string): Observable<FirebaseUser>;
    /**
     * @returns {Observable<void>} - Returns {@link UpdateEmailError} if operation
     * fails.
     */
    updateEmail(newEmail: string): Observable<void>;
    /**
     * @returns {Observable<void>} - Returns {@link UpdatePasswordError} if operation
     * fails.
     */
    updatePassword(newPassword: string): Observable<void>;
    updateProfile(profile: {
        displayName?: string;
        photoURL?: string;
    }): Observable<void>;
}
