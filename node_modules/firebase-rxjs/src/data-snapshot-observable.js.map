{"version":3,"sources":["../../../../packages/firebase-rxjs/src/data-snapshot-observable.ts"],"names":[],"mappings":"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","file":"data-snapshot-observable.js","sourceRoot":"","sourcesContent":["import { database } from 'firebase'\nimport { Observable } from 'rxjs/Observable'\nimport { map } from 'rxjs/operator/map'\nimport { mergeMap } from 'rxjs/operator/mergeMap'\nimport { toArray } from 'rxjs/operator/toArray'\nimport { DataSnapshot, ExportedSnapshot, Priority } from './interfaces'\n\nexport function makeDataSnapshotObservable<T>(observable: Observable<DataSnapshot<T>>): DataSnapshotObservable<T> {\n  return new DataSnapshotObservable<T>(subscriber => {\n    const sub = observable.subscribe(subscriber)\n    return () => sub.unsubscribe()\n  })\n}\n\nexport class DataSnapshotObservable<T> extends Observable<DataSnapshot<T>> {\n\n  exists(): Observable<boolean> {\n    return map.call(this, (snapshot: DataSnapshot<T>) => snapshot.exists());\n  }\n\n  children(): Observable<DataSnapshotObservable<T[keyof T]>> {\n    return map.call(this,\n      (snapshot: DataSnapshot<T>) => new DataSnapshotObservable<T[keyof T]>(sub => {\n        snapshot.forEach(childSnapshot => {\n          sub.next(childSnapshot);\n          return false\n        })\n        sub.complete()\n      }))\n  }\n\n  /**\n   * This operator takes the result of .val() for all children of the snapshot and emits\n   * them as an array.\n   * Contents of source snapshot:\n   * ```\n   * {\n   *  childA: { prop: 'Hello' },\n   *  childB: { prop: 'World!' },\n   * }\n   * ```\n   * Result of operator:\n   * ```\n   * [\n   *  { prop: 'Hello' },\n   *  { prop: 'World!' },\n   * ]\n   * ```\n   * @returns {Observable<C[]>}\n   */\n  toValArray(): Observable<T[keyof T][]> {\n    return mergeMap.call(this.children(),\n      (children: DataSnapshotObservable<T[keyof T]>) => toArray.call(children.val()))\n  }\n\n  values(): Observable<T[keyof T][]> {\n    return this.toValArray();\n  }\n\n  keys(): Observable<string[]> {\n    return mergeMap.call(this.children(),\n      (children: DataSnapshotObservable<T[keyof T]>) => toArray.call(children.key()))\n  }\n\n  list(): Observable<{ val: T[keyof T], key: string }[]> {\n    return mergeMap.call(this.children(),\n      (children: DataSnapshotObservable<T[keyof T]>) => toArray.call(children.entry()))\n  }\n\n  entry(): Observable<{ val: T, key: string | null }> {\n    return map.call(this,\n      (snapshot: DataSnapshot<T>) => ({ val: snapshot.val(), key: snapshot.key }))\n  }\n\n  key(): Observable<string | null> {\n    return map.call(this, (snapshot: DataSnapshot<T>) => snapshot.key)\n  }\n\n  /**\n   * When listening to events such as {@link Event.ChildMoved} the snapshot includes\n   * the key of the child before this snapshots one. This operator maps to this key.\n   * @returns {Observable<string>}\n   */\n  prevKey(): Observable<string> {\n    return map.call(this, (snapshot: DataSnapshot<T>) => snapshot.prevKey)\n  }\n\n  val(): Observable<T> {\n    return map.call(this, (snapshot: DataSnapshot<T>) => snapshot.val())\n  }\n\n  getPriority(): Observable<Priority> {\n    return map.call(this, (snapshot: DataSnapshot<T>) => snapshot.getPriority())\n  }\n\n  exportVal(): Observable<ExportedSnapshot<T>> {\n    return map.call(this, (snapshot: DataSnapshot<T>) => snapshot.exportVal())\n  }\n\n  hasChild(path: keyof T): Observable<boolean> {\n    return map.call(this, (snapshot: DataSnapshot<T>) => snapshot.hasChild(path))\n  }\n\n  hasChildren(): Observable<boolean> {\n    return map.call(this, (snapshot: DataSnapshot<T>) => snapshot.hasChildren())\n  }\n\n  numChildren(): Observable<number> {\n    return map.call(this, (snapshot: DataSnapshot<T>) => snapshot.numChildren())\n  }\n\n  child<P extends keyof T>(path: P): DataSnapshotObservable<T[P]> {\n    return new DataSnapshotObservable<T[P]>(sub => {\n      const subscription = map.call(this,\n        (snapshot: DataSnapshot<T>) => snapshot.child(path))\n        .subscribe(sub)\n\n      return () => subscription.unsubscribe()\n    })\n  }\n}\n"]}