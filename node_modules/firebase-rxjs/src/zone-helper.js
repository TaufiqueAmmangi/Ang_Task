var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Observable } from 'rxjs/Observable';
import { fromPromise } from 'rxjs/observable/fromPromise';
import { Subscriber } from 'rxjs/Subscriber';
var ZoneHelper = (function () {
    function ZoneHelper(firebaseZone) {
        this.firebaseZone = firebaseZone;
        if (!firebaseZone) {
            if (typeof Zone !== 'undefined') {
                this.firebaseZone = Zone.root.fork({ name: 'firebase' });
            }
        }
    }
    ZoneHelper.prototype.wrap = function (callback, source) {
        if (this.firebaseZone) {
            return this.firebaseZone.wrap(callback, source);
        }
        return callback;
    };
    ZoneHelper.prototype.runInFirebase = function (fn) {
        if (this.firebaseZone) {
            return this.firebaseZone.run(fn);
        }
        return fn();
    };
    ZoneHelper.prototype.wrapSubscribe = function (fn) {
        if (this.firebaseZone) {
            return this.firebaseZone.wrap(fn, 'firebaseRxJS.Observable.subscribe');
        }
        return fn;
    };
    ZoneHelper.prototype.wrapPromise = function (promiseFactory) {
        var _this = this;
        if (typeof Zone === 'undefined') {
            return fromPromise(this.runInFirebase(promiseFactory));
        }
        return new Observable(function (subscriber) {
            Zone.current.scheduleMacroTask('firebaseRxJS.Promise', function (err, res) {
                if (err) {
                    subscriber.error(err);
                }
                else {
                    subscriber.next(res);
                    subscriber.complete();
                }
            }, {}, function (task) {
                var promise = _this.runInFirebase(promiseFactory);
                promise.then(task.invoke.bind(task, null), task.invoke.bind(task));
            }, function (task) { });
        });
    };
    ZoneHelper.prototype.createObservable = function (subscribe) {
        var obs = new Observable(this.wrapSubscribe(subscribe));
        if (typeof Zone === 'undefined') {
            return obs;
        }
        return obs.lift(new EventTaskOperator());
    };
    return ZoneHelper;
}());
export { ZoneHelper };
var EventTaskOperator = (function () {
    function EventTaskOperator() {
    }
    EventTaskOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new EventTaskSubscriber(subscriber, Zone.current));
    };
    return EventTaskOperator;
}());
var EventTaskSubscriber = (function (_super) {
    __extends(EventTaskSubscriber, _super);
    function EventTaskSubscriber(destination, zone) {
        var _this = _super.call(this, destination) || this;
        _this.zone = zone;
        _this.nextTask = _this.zone.scheduleEventTask('firebaseRxJS.Observable.next', function (val) { return _this.destination.next(val); }, {}, function () { }, function () { });
        _this.add(function () { return _this.zone.cancelTask(_this.nextTask); });
        return _this;
    }
    EventTaskSubscriber.prototype._next = function (value) {
        var nextTask = this.nextTask;
        this.zone.run(nextTask.invoke, nextTask, [value]);
    };
    EventTaskSubscriber.prototype._error = function (err) {
        var destination = this.destination;
        this.zone.scheduleMicroTask('firebaseRxJS.Observable.error', destination.error.bind(destination, err));
    };
    EventTaskSubscriber.prototype._complete = function () {
        var destination = this.destination;
        this.zone.scheduleMicroTask('firebaseRxJS.Observable.complete', destination.complete.bind(destination));
    };
    return EventTaskSubscriber;
}(Subscriber));
//# sourceMappingURL=zone-helper.js.map