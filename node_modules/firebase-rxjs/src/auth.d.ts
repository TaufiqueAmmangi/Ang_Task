import { Observable } from 'rxjs/Observable';
import { FirebaseApp } from './app';
import { ActionCodeInfo, AuthCredential, AuthProvider } from './interfaces';
import { NativeFirebaseAuth } from './native-firebase';
import { FirebaseUser, FirebaseUserCredential } from './user';
export declare class FirebaseAuth {
    private fbAuth;
    private app;
    /**
     * Observable which emits when authorization state of the user changes.
     */
    readonly user: Observable<FirebaseUser | null>;
    constructor(fbAuth: NativeFirebaseAuth, app: FirebaseApp);
    /**
     * @param code
     * @returns {Observable<void>} - Returns {@link ActionCodeError} if operation fails.
     */
    applyActionCode(code: string): Observable<void>;
    /**
     * @param code
     * @returns {Observable<ActionCodeInfo>} - Returns {@link ActionCodeError} if operation fails.
     */
    checkActionCode(code: string): Observable<ActionCodeInfo>;
    /**
     * @param code
     * @param newPassword
     * @returns {Observable<void>} - Returns {@link ConfirmPasswordResetError} if operation fails.
     */
    confirmPasswordReset(code: string, newPassword: string): Observable<void>;
    /**
     *
     * @param email
     * @param password
     * @returns {Observable<FirebaseUser>} - Returns {@link CreateUserWithEmailAndPasswordError} if
     *     operation fails.
     */
    createUserWithEmailAndPassword(email: string, password: string): Observable<FirebaseUser>;
    /**
     *
     * @param email
     * @returns {Observable<string[]>} - Returns {@link FetchProvidersForEmailError} if operation
     *     fails.
     */
    fetchProvidersForEmail(email: string): Observable<string[]>;
    /**
     * @returns {Observable<FirebaseUserCredential>} - Returns {@link GetRedirectResultError} if
     *     operation fails.
     */
    getRedirectResult(): Observable<FirebaseUserCredential>;
    /**
     * @param email
     * @returns {Observable<void>} - Returns {@link SendPasswordResetEmailError} if operation fails.
     */
    sendPasswordResetEmail(email: string): Observable<void>;
    /**
     *
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInAnonymouslyError} if operation
     *     fails.
     */
    signInAnonymously(): Observable<FirebaseUser>;
    /**
     * @param credential
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithCredentialError} if operation
     *     fails.
     */
    signInWithCredential(credential: AuthCredential): Observable<FirebaseUser>;
    /**
     * @param token
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithCustomTokenError} if operation
     *     fails.
     */
    signInWithCustomToken(token: string): Observable<FirebaseUser>;
    /**
     * @param email
     * @param password
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithEmailAndPasswordError} if
     *     operation fails.
     */
    signInWithEmailAndPassword(email: string, password: string): Observable<FirebaseUser>;
    /**
     * @param provider
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithPopupError} if operation fails.
     */
    signInWithPopup(provider: AuthProvider): Observable<FirebaseUserCredential>;
    /**
     * @param provider
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithRedirectError} if operation
     *     fails.
     */
    signInWithRedirect(provider: AuthProvider): Observable<FirebaseUserCredential>;
    signOut(): Observable<void>;
    /**
     *
     * @param code
     * @returns {Observable<string>} - Returns {@link VerifyPasswordResetCodeError} if operation
     * fails.
     */
    verifyPasswordResetCode(code: string): Observable<string>;
}
