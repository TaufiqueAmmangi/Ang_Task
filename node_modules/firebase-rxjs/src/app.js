import * as firebase from 'firebase';
import { FirebaseAuth } from './auth';
import { FirebaseDatabase } from './database';
import { ZoneHelper } from './zone-helper';
var lastAppId = 0;
var FirebaseApp = (function () {
    function FirebaseApp(config, _a) {
        var firebaseZone = (_a === void 0 ? {} : _a).firebaseZone;
        this.config = config;
        config.name = config.name || "app-" + lastAppId++;
        this.zoneHelper = new ZoneHelper(firebaseZone);
        this.nativeApp = this.zoneHelper.runInFirebase(function () {
            return firebase.initializeApp(config.options, config.name);
        });
    }
    FirebaseApp.prototype.delete = function () {
        var _this = this;
        return this.zoneHelper.wrapPromise(function () { return _this.nativeApp.delete(); });
    };
    /**
     * Get the with this {@link FirebaseApp} associated {@link FirebaseAuth} instance.
     */
    FirebaseApp.prototype.auth = function () {
        var _this = this;
        if (!this._auth) {
            this._auth =
                new FirebaseAuth(this.zoneHelper.runInFirebase(function () { return _this.nativeApp.auth(); }), this);
        }
        return this._auth;
    };
    /**
     * Get the with this {@link FirebaseApp} associated {@link FirebaseDatabase}.
     *
     * The type parameter T is used to supply the schema of your database. If you do not want to
     * use one set it to `any`. Using a schema provides type safety when accessing the database.
     */
    FirebaseApp.prototype.database = function () {
        var _this = this;
        if (!this._database) {
            this._database =
                new FirebaseDatabase(this.zoneHelper.runInFirebase(function () { return _this.nativeApp.database(); }), this);
        }
        return this._database;
    };
    return FirebaseApp;
}());
export { FirebaseApp };
//# sourceMappingURL=app.js.map