var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Observable } from 'rxjs/Observable';
import { map } from 'rxjs/operator/map';
import { mergeMap } from 'rxjs/operator/mergeMap';
import { toArray } from 'rxjs/operator/toArray';
export function makeDataSnapshotObservable(observable) {
    return new DataSnapshotObservable(function (subscriber) {
        var sub = observable.subscribe(subscriber);
        return function () { return sub.unsubscribe(); };
    });
}
var DataSnapshotObservable = (function (_super) {
    __extends(DataSnapshotObservable, _super);
    function DataSnapshotObservable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataSnapshotObservable.prototype.exists = function () {
        return map.call(this, function (snapshot) { return snapshot.exists(); });
    };
    DataSnapshotObservable.prototype.children = function () {
        return map.call(this, function (snapshot) { return new DataSnapshotObservable(function (sub) {
            snapshot.forEach(function (childSnapshot) {
                sub.next(childSnapshot);
                return false;
            });
            sub.complete();
        }); });
    };
    /**
     * This operator takes the result of .val() for all children of the snapshot and emits
     * them as an array.
     * Contents of source snapshot:
     * ```
     * {
     *  childA: { prop: 'Hello' },
     *  childB: { prop: 'World!' },
     * }
     * ```
     * Result of operator:
     * ```
     * [
     *  { prop: 'Hello' },
     *  { prop: 'World!' },
     * ]
     * ```
     * @returns {Observable<C[]>}
     */
    DataSnapshotObservable.prototype.toValArray = function () {
        return mergeMap.call(this.children(), function (children) { return toArray.call(children.val()); });
    };
    DataSnapshotObservable.prototype.values = function () {
        return this.toValArray();
    };
    DataSnapshotObservable.prototype.keys = function () {
        return mergeMap.call(this.children(), function (children) { return toArray.call(children.key()); });
    };
    DataSnapshotObservable.prototype.list = function () {
        return mergeMap.call(this.children(), function (children) { return toArray.call(children.entry()); });
    };
    DataSnapshotObservable.prototype.entry = function () {
        return map.call(this, function (snapshot) { return ({ val: snapshot.val(), key: snapshot.key }); });
    };
    DataSnapshotObservable.prototype.key = function () {
        return map.call(this, function (snapshot) { return snapshot.key; });
    };
    /**
     * When listening to events such as {@link Event.ChildMoved} the snapshot includes
     * the key of the child before this snapshots one. This operator maps to this key.
     * @returns {Observable<string>}
     */
    DataSnapshotObservable.prototype.prevKey = function () {
        return map.call(this, function (snapshot) { return snapshot.prevKey; });
    };
    DataSnapshotObservable.prototype.val = function () {
        return map.call(this, function (snapshot) { return snapshot.val(); });
    };
    DataSnapshotObservable.prototype.getPriority = function () {
        return map.call(this, function (snapshot) { return snapshot.getPriority(); });
    };
    DataSnapshotObservable.prototype.exportVal = function () {
        return map.call(this, function (snapshot) { return snapshot.exportVal(); });
    };
    DataSnapshotObservable.prototype.hasChild = function (path) {
        return map.call(this, function (snapshot) { return snapshot.hasChild(path); });
    };
    DataSnapshotObservable.prototype.hasChildren = function () {
        return map.call(this, function (snapshot) { return snapshot.hasChildren(); });
    };
    DataSnapshotObservable.prototype.numChildren = function () {
        return map.call(this, function (snapshot) { return snapshot.numChildren(); });
    };
    DataSnapshotObservable.prototype.child = function (path) {
        var _this = this;
        return new DataSnapshotObservable(function (sub) {
            var subscription = map.call(_this, function (snapshot) { return snapshot.child(path); })
                .subscribe(sub);
            return function () { return subscription.unsubscribe(); };
        });
    };
    return DataSnapshotObservable;
}(Observable));
export { DataSnapshotObservable };
//# sourceMappingURL=data-snapshot-observable.js.map