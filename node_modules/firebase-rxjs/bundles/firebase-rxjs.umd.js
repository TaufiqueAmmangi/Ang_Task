(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('firebase'), require('rxjs/operator/map'), require('rxjs/observable/of'), require('rxjs/operator/mapTo'), require('rxjs/Observable'), require('rxjs/operator/mergeMap'), require('rxjs/operator/toArray'), require('rxjs/observable/fromPromise'), require('rxjs/Subscriber')) :
	typeof define === 'function' && define.amd ? define(['exports', 'firebase', 'rxjs/operator/map', 'rxjs/observable/of', 'rxjs/operator/mapTo', 'rxjs/Observable', 'rxjs/operator/mergeMap', 'rxjs/operator/toArray', 'rxjs/observable/fromPromise', 'rxjs/Subscriber'], factory) :
	(factory((global.firebaseRxJS = global.firebaseRxJS || {}),global.firebase,global.Rx.Observable.prototype,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable,global.Rx));
}(this, (function (exports,firebase,rxjs_operator_map,rxjs_observable_of,rxjs_operator_mapTo,rxjs_Observable,rxjs_operator_mergeMap,rxjs_operator_toArray,rxjs_observable_fromPromise,rxjs_Subscriber) { 'use strict';

var FirebaseUserCredential = (function () {
    function FirebaseUserCredential(cred, app) {
        this.credential = cred.credential || undefined;
        this.user = cred.user ? new FirebaseUser(cred.user, app) : undefined;
    }
    return FirebaseUserCredential;
}());
var FirebaseUser = (function () {
    function FirebaseUser(user, app) {
        this.user = user;
        this.app = app;
    }
    Object.defineProperty(FirebaseUser.prototype, "displayName", {
        get: function () {
            return this.user.displayName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "email", {
        get: function () {
            return this.user.email;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "emailVerified", {
        get: function () {
            return this.user.emailVerified;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "isAnonymous", {
        get: function () {
            return this.user.isAnonymous;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "photoURL", {
        get: function () {
            return this.user.photoURL;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "providerData", {
        get: function () {
            return this.user.providerData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "providerId", {
        get: function () {
            return this.user.providerId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "refreshToken", {
        get: function () {
            return this.user.refreshToken;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "uid", {
        get: function () {
            return this.user.uid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @returns {Observable<void>} - Returns {@link DeleteUserError} if operation fails.
     */
    FirebaseUser.prototype.delete = function () {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.delete(); });
    };
    FirebaseUser.prototype.getToken = function (forceRefresh) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.getToken(forceRefresh); });
    };
    /**
     * @returns {Observable<FirebaseUser>} - Returns {@link LinkUserError} if operation fails.
     */
    FirebaseUser.prototype.link = function (credential) {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () { return _this.user.link(credential); }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @returns {Observable<FirebaseUserCredential>} - Returns {@link LinkUserWithPopupError} if
     *     operation fails.
     */
    FirebaseUser.prototype.linkWithPopup = function (provider) {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () { return _this.user.linkWithPopup(provider); }), function (cred) { return new FirebaseUserCredential(cred, _this.app); });
    };
    /**
     * @returns {Observable<FirebaseUserCredential>} - Returns {@link LinkUserWithRedirectError} if
     *     operation fails.
     */
    FirebaseUser.prototype.linkWithRedirect = function (provider) {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () { return _this.user.linkWithRedirect(provider); }), function (cred) { return new FirebaseUserCredential(cred, _this.app); });
    };
    /**
     * @returns {Observable<void>} - Returns {@link ReauthenticateError} if operation
     * fails.
     */
    FirebaseUser.prototype.reauthenticate = function (credential) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.reauthenticate(credential); });
    };
    FirebaseUser.prototype.reload = function () {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.reload(); });
    };
    FirebaseUser.prototype.sendEmailVerification = function () {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.sendEmailVerification(); });
    };
    FirebaseUser.prototype.unlink = function (providerId) {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () { return _this.user.unlink(providerId); }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @returns {Observable<void>} - Returns {@link UpdateEmailError} if operation
     * fails.
     */
    FirebaseUser.prototype.updateEmail = function (newEmail) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.updateEmail(newEmail); });
    };
    /**
     * @returns {Observable<void>} - Returns {@link UpdatePasswordError} if operation
     * fails.
     */
    FirebaseUser.prototype.updatePassword = function (newPassword) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.updatePassword(newPassword); });
    };
    FirebaseUser.prototype.updateProfile = function (profile) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.updateProfile(profile); });
    };
    return FirebaseUser;
}());

var FirebaseAuth = (function () {
    function FirebaseAuth(fbAuth, app) {
        this.fbAuth = fbAuth;
        this.app = app;
    }
    Object.defineProperty(FirebaseAuth.prototype, "user", {
        /**
         * Observable which emits when authorization state of the user changes.
         */
        get: function () {
            var _this = this;
            return rxjs_operator_map.map.call(this.app.zoneHelper.createObservable(function (observer) { return _this.fbAuth.onAuthStateChanged(observer); }), function (user) { return user ? new FirebaseUser(user, _this.app) : null; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param code
     * @returns {Observable<void>} - Returns {@link ActionCodeError} if operation fails.
     */
    FirebaseAuth.prototype.applyActionCode = function (code) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.applyActionCode(code); });
    };
    /**
     * @param code
     * @returns {Observable<ActionCodeInfo>} - Returns {@link ActionCodeError} if operation fails.
     */
    FirebaseAuth.prototype.checkActionCode = function (code) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.checkActionCode(code); });
    };
    /**
     * @param code
     * @param newPassword
     * @returns {Observable<void>} - Returns {@link ConfirmPasswordResetError} if operation fails.
     */
    FirebaseAuth.prototype.confirmPasswordReset = function (code, newPassword) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () {
            return _this.fbAuth.confirmPasswordReset(code, newPassword);
        });
    };
    /**
     *
     * @param email
     * @param password
     * @returns {Observable<FirebaseUser>} - Returns {@link CreateUserWithEmailAndPasswordError} if
     *     operation fails.
     */
    FirebaseAuth.prototype.createUserWithEmailAndPassword = function (email, password) {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () {
            return _this.fbAuth.createUserWithEmailAndPassword(email, password);
        }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     *
     * @param email
     * @returns {Observable<string[]>} - Returns {@link FetchProvidersForEmailError} if operation
     *     fails.
     */
    FirebaseAuth.prototype.fetchProvidersForEmail = function (email) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.fetchProvidersForEmail(email); });
    };
    /**
     * @returns {Observable<FirebaseUserCredential>} - Returns {@link GetRedirectResultError} if
     *     operation fails.
     */
    FirebaseAuth.prototype.getRedirectResult = function () {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.getRedirectResult(); }), function (cred) { return new FirebaseUserCredential(cred, _this.app); });
    };
    /**
     * @param email
     * @returns {Observable<void>} - Returns {@link SendPasswordResetEmailError} if operation fails.
     */
    FirebaseAuth.prototype.sendPasswordResetEmail = function (email) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.sendPasswordResetEmail(email); });
    };
    /**
     *
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInAnonymouslyError} if operation
     *     fails.
     */
    FirebaseAuth.prototype.signInAnonymously = function () {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signInAnonymously(); }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @param credential
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithCredentialError} if operation
     *     fails.
     */
    FirebaseAuth.prototype.signInWithCredential = function (credential) {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signInWithCredential(credential); }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @param token
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithCustomTokenError} if operation
     *     fails.
     */
    FirebaseAuth.prototype.signInWithCustomToken = function (token) {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signInWithCustomToken(token); }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @param email
     * @param password
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithEmailAndPasswordError} if
     *     operation fails.
     */
    FirebaseAuth.prototype.signInWithEmailAndPassword = function (email, password) {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () {
            return _this.fbAuth.signInWithEmailAndPassword(email, password);
        }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @param provider
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithPopupError} if operation fails.
     */
    FirebaseAuth.prototype.signInWithPopup = function (provider) {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signInWithPopup(provider); }), function (cred) { return new FirebaseUserCredential(cred, _this.app); });
    };
    /**
     * @param provider
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithRedirectError} if operation
     *     fails.
     */
    FirebaseAuth.prototype.signInWithRedirect = function (provider) {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signInWithRedirect(provider); }), function (cred) { return new FirebaseUserCredential(cred, _this.app); });
    };
    FirebaseAuth.prototype.signOut = function () {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signOut(); });
    };
    /**
     *
     * @param code
     * @returns {Observable<string>} - Returns {@link VerifyPasswordResetCodeError} if operation
     * fails.
     */
    FirebaseAuth.prototype.verifyPasswordResetCode = function (code) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.verifyPasswordResetCode(code); });
    };
    return FirebaseAuth;
}());

var __extends$1 = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
function makeDataSnapshotObservable(observable) {
    return new DataSnapshotObservable(function (subscriber) {
        var sub = observable.subscribe(subscriber);
        return function () { return sub.unsubscribe(); };
    });
}
var DataSnapshotObservable = (function (_super) {
    __extends$1(DataSnapshotObservable, _super);
    function DataSnapshotObservable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataSnapshotObservable.prototype.exists = function () {
        return rxjs_operator_map.map.call(this, function (snapshot) { return snapshot.exists(); });
    };
    DataSnapshotObservable.prototype.children = function () {
        return rxjs_operator_map.map.call(this, function (snapshot) { return new DataSnapshotObservable(function (sub) {
            snapshot.forEach(function (childSnapshot) {
                sub.next(childSnapshot);
                return false;
            });
            sub.complete();
        }); });
    };
    /**
     * This operator takes the result of .val() for all children of the snapshot and emits
     * them as an array.
     * Contents of source snapshot:
     * ```
     * {
     *  childA: { prop: 'Hello' },
     *  childB: { prop: 'World!' },
     * }
     * ```
     * Result of operator:
     * ```
     * [
     *  { prop: 'Hello' },
     *  { prop: 'World!' },
     * ]
     * ```
     * @returns {Observable<C[]>}
     */
    DataSnapshotObservable.prototype.toValArray = function () {
        return rxjs_operator_mergeMap.mergeMap.call(this.children(), function (children) { return rxjs_operator_toArray.toArray.call(children.val()); });
    };
    DataSnapshotObservable.prototype.values = function () {
        return this.toValArray();
    };
    DataSnapshotObservable.prototype.keys = function () {
        return rxjs_operator_mergeMap.mergeMap.call(this.children(), function (children) { return rxjs_operator_toArray.toArray.call(children.key()); });
    };
    DataSnapshotObservable.prototype.list = function () {
        return rxjs_operator_mergeMap.mergeMap.call(this.children(), function (children) { return rxjs_operator_toArray.toArray.call(children.entry()); });
    };
    DataSnapshotObservable.prototype.entry = function () {
        return rxjs_operator_map.map.call(this, function (snapshot) { return ({ val: snapshot.val(), key: snapshot.key }); });
    };
    DataSnapshotObservable.prototype.key = function () {
        return rxjs_operator_map.map.call(this, function (snapshot) { return snapshot.key; });
    };
    /**
     * When listening to events such as {@link Event.ChildMoved} the snapshot includes
     * the key of the child before this snapshots one. This operator maps to this key.
     * @returns {Observable<string>}
     */
    DataSnapshotObservable.prototype.prevKey = function () {
        return rxjs_operator_map.map.call(this, function (snapshot) { return snapshot.prevKey; });
    };
    DataSnapshotObservable.prototype.val = function () {
        return rxjs_operator_map.map.call(this, function (snapshot) { return snapshot.val(); });
    };
    DataSnapshotObservable.prototype.getPriority = function () {
        return rxjs_operator_map.map.call(this, function (snapshot) { return snapshot.getPriority(); });
    };
    DataSnapshotObservable.prototype.exportVal = function () {
        return rxjs_operator_map.map.call(this, function (snapshot) { return snapshot.exportVal(); });
    };
    DataSnapshotObservable.prototype.hasChild = function (path) {
        return rxjs_operator_map.map.call(this, function (snapshot) { return snapshot.hasChild(path); });
    };
    DataSnapshotObservable.prototype.hasChildren = function () {
        return rxjs_operator_map.map.call(this, function (snapshot) { return snapshot.hasChildren(); });
    };
    DataSnapshotObservable.prototype.numChildren = function () {
        return rxjs_operator_map.map.call(this, function (snapshot) { return snapshot.numChildren(); });
    };
    DataSnapshotObservable.prototype.child = function (path) {
        var _this = this;
        return new DataSnapshotObservable(function (sub) {
            var subscription = rxjs_operator_map.map.call(_this, function (snapshot) { return snapshot.child(path); })
                .subscribe(sub);
            return function () { return subscription.unsubscribe(); };
        });
    };
    return DataSnapshotObservable;
}(rxjs_Observable.Observable));

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Enum of event types.
 */
var Event = (function () {
    function Event() {
    }
    return Event;
}());
Event.Value = 'value';
Event.ChildAdded = 'child_added';
Event.ChildChanged = 'child_changed';
Event.ChildRemoved = 'child_removed';
Event.ChildMoved = 'child_moved';
var FirebaseQuery = (function () {
    function FirebaseQuery(_ref, app) {
        this._ref = _ref;
        this.app = app;
    }
    Object.defineProperty(FirebaseQuery.prototype, "ref", {
        get: function () {
            return this.wrappedRef;
        },
        enumerable: true,
        configurable: true
    });
    FirebaseQuery.prototype.orderByChild = function (child) {
        this._call('orderByChild', child);
        return this;
    };
    FirebaseQuery.prototype.orderByKey = function () {
        this._call('orderByKey');
        return this;
    };
    FirebaseQuery.prototype.orderByPriority = function () {
        this._call('orderByPriority');
        return this;
    };
    FirebaseQuery.prototype.orderByValue = function () {
        this._call('orderByValue');
        return this;
    };
    FirebaseQuery.prototype.startAt = function (value, key) {
        this._call('startAt', value, key);
        return this;
    };
    FirebaseQuery.prototype.endAt = function (value, key) {
        this._call('endAt', value, key);
        return this;
    };
    FirebaseQuery.prototype.equalTo = function (value, key) {
        this._call('equalTo', value, key);
        return this;
    };
    FirebaseQuery.prototype.limitToFirst = function (limit) {
        this._call('limitToFirst', limit);
        return this;
    };
    FirebaseQuery.prototype.limitToLast = function (limit) {
        this._call('limitToLast', limit);
        return this;
    };
    FirebaseQuery.prototype.once = function (event) {
        return makeDataSnapshotObservable(this._once(event));
    };
    FirebaseQuery.prototype.onceValue = function () {
        return this.once('value');
    };
    FirebaseQuery.prototype.onceChildAdded = function () {
        return this.once('child_added');
    };
    FirebaseQuery.prototype.onceChildChanged = function () {
        return this.once('child_changed');
    };
    FirebaseQuery.prototype.onceChildMoved = function () {
        return this.once('child_moved');
    };
    FirebaseQuery.prototype.onceChildRemoved = function () {
        return this.once('child_removed');
    };
    FirebaseQuery.prototype.on = function (event) {
        return makeDataSnapshotObservable(this._on(event));
    };
    FirebaseQuery.prototype.onValue = function () {
        return this.on('value');
    };
    FirebaseQuery.prototype.onChildAdded = function () {
        return this.on('child_added');
    };
    FirebaseQuery.prototype.onChildChanged = function () {
        return this.on('child_changed');
    };
    FirebaseQuery.prototype.onChildMoved = function () {
        return this.on('child_moved');
    };
    FirebaseQuery.prototype.onChildRemoved = function () {
        return this.on('child_removed');
    };
    FirebaseQuery.prototype.isEqual = function (query) {
        return this.getQueryOrRef().isEqual(query.getQueryOrRef());
    };
    FirebaseQuery.prototype._once = function (event) {
        var _this = this;
        return rxjs_operator_map.map.call(this.app.zoneHelper.wrapPromise(function () { return _this.getQueryOrRef().once(event); }), function (nativeSnapshot) { return _this.makeDataSnapshot(nativeSnapshot); });
    };
    FirebaseQuery.prototype._on = function (event) {
        var _this = this;
        return this.app.zoneHelper.createObservable(function (sub) {
            var cb = _this.getQueryOrRef().on(event, _this.getEventHandler(sub), function (err) { return sub.error(err); });
            return function () { return _this.getQueryOrRef().off(event, cb); };
        });
    };
    FirebaseQuery.prototype.makeDataSnapshot = function (snapshot, prevKey) {
        var _this = this;
        if (typeof prevKey !== 'undefined') {
            snapshot.prevKey = prevKey;
        }
        Object.defineProperty(snapshot, 'ref', {
            get: function () { return _this; }
        });
        return snapshot;
    };
    FirebaseQuery.prototype.getEventHandler = function (sub, complete) {
        var _this = this;
        return function (snapshot, prevKey) {
            sub.next(_this.makeDataSnapshot(snapshot, prevKey));
            if (complete) {
                sub.complete();
            }
        };
    };
    FirebaseQuery.prototype.getQueryOrRef = function () {
        if (this.query) {
            return this.query;
        }
        return this._ref;
    };
    FirebaseQuery.prototype._call = function (fnName) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.app.zoneHelper.runInFirebase(function () {
            if (_this.query) {
                _this.query = (_a = _this.query)[fnName].apply(_a, args);
            }
            else {
                _this.query = (_b = _this._ref)[fnName].apply(_b, args);
            }
            var _a, _b;
        });
    };
    return FirebaseQuery;
}());
var FirebaseDatabaseRef = (function (_super) {
    __extends(FirebaseDatabaseRef, _super);
    function FirebaseDatabaseRef(parent, ref, app) {
        var _this = _super.call(this, ref, app) || this;
        _this.parent = parent;
        _this.wrappedRef = _this;
        return _this;
    }
    Object.defineProperty(FirebaseDatabaseRef.prototype, "key", {
        get: function () {
            return this._ref.key;
        },
        enumerable: true,
        configurable: true
    });
    FirebaseDatabaseRef.prototype.child = function (path) {
        return new FirebaseDatabaseRef(this, this._ref.child(path), this.app);
    };
    FirebaseDatabaseRef.prototype.set = function (value) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this._ref.set(value); });
    };
    FirebaseDatabaseRef.prototype.setPriority = function (priority) {
        var _this = this;
        // There seems to be a bug with the typing for #setPriority(priority, onComplete): Promise
        // The firebase library, in every other case, declares the onComplete function optional since a
        // Promise is returned as well.
        return this.app.zoneHelper.wrapPromise(function () { return _this._ref.setPriority(priority); });
    };
    FirebaseDatabaseRef.prototype.setWithPriority = function (newVal, priority) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this._ref.setWithPriority(newVal, priority); });
    };
    FirebaseDatabaseRef.prototype.push = function (value) {
        var pushRef = this._ref.push(value);
        var ref = new FirebaseDatabaseRef(this, pushRef, this.app);
        // Only if a value to push was given, use ref as promise, since otherwise
        // pushRef.then will be undefined
        if (value) {
            return rxjs_operator_mapTo.mapTo.call(this.app.zoneHelper.wrapPromise(function () { return pushRef; }), ref);
        }
        return rxjs_observable_of.of(ref);
    };
    FirebaseDatabaseRef.prototype.update = function (value) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this._ref.update(value); });
    };
    FirebaseDatabaseRef.prototype.remove = function () {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this._ref.remove(); });
    };
    FirebaseDatabaseRef.prototype.transaction = function (transactionHandler, applyLocally) {
        var _this = this;
        if (Zone) {
            transactionHandler = this.app.zoneHelper.wrap(transactionHandler, 'firebaseRxJS.transaction');
        }
        return this.app.zoneHelper.wrapPromise(function () { return new Promise(function (resolve, reject) { return _this._ref.transaction(transactionHandler, function (err, committed, snapshot) {
            return err ? reject(err) : resolve({
                committed: committed,
                snapshot: _this.makeDataSnapshot(snapshot)
            });
        }, applyLocally); }); });
    };
    return FirebaseDatabaseRef;
}(FirebaseQuery));
/**
 * A special object with information about the connection between client and server which can be
 * accessed by using `db.ref('.info')`.
 */
var InfoSchema = (function () {
    function InfoSchema() {
    }
    return InfoSchema;
}());
var FirebaseDatabase = (function () {
    function FirebaseDatabase(db, app) {
        this.db = db;
        this.app = app;
    }
    FirebaseDatabase.prototype.ref = function (path) {
        return new FirebaseDatabaseRef(null, this.db.ref(path), this.app);
    };
    return FirebaseDatabase;
}());
/**
 * A collection of special constants which can be used when writing data. Their values will be
 * substituted on the server with server generated values.
 * E.g {@link FirebaseDatabase.ServerValue.TIMESTAMP} will be substituted for the server time
 * when committing a write.
 */
FirebaseDatabase.ServerValue = firebase.database.ServerValue;

var __extends$2 = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ZoneHelper = (function () {
    function ZoneHelper(firebaseZone) {
        this.firebaseZone = firebaseZone;
        if (!firebaseZone) {
            if (typeof Zone !== 'undefined') {
                this.firebaseZone = Zone.root.fork({ name: 'firebase' });
            }
        }
    }
    ZoneHelper.prototype.wrap = function (callback, source) {
        if (this.firebaseZone) {
            return this.firebaseZone.wrap(callback, source);
        }
        return callback;
    };
    ZoneHelper.prototype.runInFirebase = function (fn) {
        if (this.firebaseZone) {
            return this.firebaseZone.run(fn);
        }
        return fn();
    };
    ZoneHelper.prototype.wrapSubscribe = function (fn) {
        if (this.firebaseZone) {
            return this.firebaseZone.wrap(fn, 'firebaseRxJS.Observable.subscribe');
        }
        return fn;
    };
    ZoneHelper.prototype.wrapPromise = function (promiseFactory) {
        var _this = this;
        if (typeof Zone === 'undefined') {
            return rxjs_observable_fromPromise.fromPromise(this.runInFirebase(promiseFactory));
        }
        return new rxjs_Observable.Observable(function (subscriber) {
            Zone.current.scheduleMacroTask('firebaseRxJS.Promise', function (err, res) {
                if (err) {
                    subscriber.error(err);
                }
                else {
                    subscriber.next(res);
                    subscriber.complete();
                }
            }, {}, function (task) {
                var promise = _this.runInFirebase(promiseFactory);
                promise.then(task.invoke.bind(task, null), task.invoke.bind(task));
            }, function (task) { });
        });
    };
    ZoneHelper.prototype.createObservable = function (subscribe) {
        var obs = new rxjs_Observable.Observable(this.wrapSubscribe(subscribe));
        if (typeof Zone === 'undefined') {
            return obs;
        }
        return obs.lift(new EventTaskOperator());
    };
    return ZoneHelper;
}());
var EventTaskOperator = (function () {
    function EventTaskOperator() {
    }
    EventTaskOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new EventTaskSubscriber(subscriber, Zone.current));
    };
    return EventTaskOperator;
}());
var EventTaskSubscriber = (function (_super) {
    __extends$2(EventTaskSubscriber, _super);
    function EventTaskSubscriber(destination, zone) {
        var _this = _super.call(this, destination) || this;
        _this.zone = zone;
        _this.nextTask = _this.zone.scheduleEventTask('firebaseRxJS.Observable.next', function (val) { return _this.destination.next(val); }, {}, function () { }, function () { });
        _this.add(function () { return _this.zone.cancelTask(_this.nextTask); });
        return _this;
    }
    EventTaskSubscriber.prototype._next = function (value) {
        var nextTask = this.nextTask;
        this.zone.run(nextTask.invoke, nextTask, [value]);
    };
    EventTaskSubscriber.prototype._error = function (err) {
        var destination = this.destination;
        this.zone.scheduleMicroTask('firebaseRxJS.Observable.error', destination.error.bind(destination, err));
    };
    EventTaskSubscriber.prototype._complete = function () {
        var destination = this.destination;
        this.zone.scheduleMicroTask('firebaseRxJS.Observable.complete', destination.complete.bind(destination));
    };
    return EventTaskSubscriber;
}(rxjs_Subscriber.Subscriber));

var lastAppId = 0;
var FirebaseApp = (function () {
    function FirebaseApp(config, _a) {
        var firebaseZone = (_a === void 0 ? {} : _a).firebaseZone;
        this.config = config;
        config.name = config.name || "app-" + lastAppId++;
        this.zoneHelper = new ZoneHelper(firebaseZone);
        this.nativeApp = this.zoneHelper.runInFirebase(function () {
            return firebase.initializeApp(config.options, config.name);
        });
    }
    FirebaseApp.prototype.delete = function () {
        var _this = this;
        return this.zoneHelper.wrapPromise(function () { return _this.nativeApp.delete(); });
    };
    /**
     * Get the with this {@link FirebaseApp} associated {@link FirebaseAuth} instance.
     */
    FirebaseApp.prototype.auth = function () {
        var _this = this;
        if (!this._auth) {
            this._auth =
                new FirebaseAuth(this.zoneHelper.runInFirebase(function () { return _this.nativeApp.auth(); }), this);
        }
        return this._auth;
    };
    /**
     * Get the with this {@link FirebaseApp} associated {@link FirebaseDatabase}.
     *
     * The type parameter T is used to supply the schema of your database. If you do not want to
     * use one set it to `any`. Using a schema provides type safety when accessing the database.
     */
    FirebaseApp.prototype.database = function () {
        var _this = this;
        if (!this._database) {
            this._database =
                new FirebaseDatabase(this.zoneHelper.runInFirebase(function () { return _this.nativeApp.database(); }), this);
        }
        return this._database;
    };
    return FirebaseApp;
}());

var __extends$3 = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var GoogleAuthProvider = (function (_super) {
    __extends$3(GoogleAuthProvider, _super);
    function GoogleAuthProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GoogleAuthProvider;
}(firebase.auth.GoogleAuthProvider));
var FacebookAuthProvider = (function (_super) {
    __extends$3(FacebookAuthProvider, _super);
    function FacebookAuthProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return FacebookAuthProvider;
}(firebase.auth.FacebookAuthProvider));
var GithubAuthProvider = (function (_super) {
    __extends$3(GithubAuthProvider, _super);
    function GithubAuthProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GithubAuthProvider;
}(firebase.auth.GithubAuthProvider));
var EmailAuthProvider = (function (_super) {
    __extends$3(EmailAuthProvider, _super);
    function EmailAuthProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EmailAuthProvider;
}(firebase.auth.EmailAuthProvider));
var TwitterAuthProvider = (function (_super) {
    __extends$3(TwitterAuthProvider, _super);
    function TwitterAuthProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TwitterAuthProvider;
}(firebase.auth.TwitterAuthProvider));

exports.FirebaseApp = FirebaseApp;
exports.FirebaseAuth = FirebaseAuth;
exports.Event = Event;
exports.FirebaseQuery = FirebaseQuery;
exports.FirebaseDatabaseRef = FirebaseDatabaseRef;
exports.InfoSchema = InfoSchema;
exports.FirebaseDatabase = FirebaseDatabase;
exports.FirebaseUserCredential = FirebaseUserCredential;
exports.FirebaseUser = FirebaseUser;
exports.GoogleAuthProvider = GoogleAuthProvider;
exports.FacebookAuthProvider = FacebookAuthProvider;
exports.GithubAuthProvider = GithubAuthProvider;
exports.EmailAuthProvider = EmailAuthProvider;
exports.TwitterAuthProvider = TwitterAuthProvider;
exports.makeDataSnapshotObservable = makeDataSnapshotObservable;
exports.DataSnapshotObservable = DataSnapshotObservable;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=firebase-rxjs.umd.js.map
