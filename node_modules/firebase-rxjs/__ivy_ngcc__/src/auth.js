import { map } from 'rxjs/operator/map';
import { FirebaseUser, FirebaseUserCredential } from './user';
var FirebaseAuth = (function () {
    function FirebaseAuth(fbAuth, app) {
        this.fbAuth = fbAuth;
        this.app = app;
    }
    Object.defineProperty(FirebaseAuth.prototype, "user", {
        /**
         * Observable which emits when authorization state of the user changes.
         */
        get: function () {
            var _this = this;
            return map.call(this.app.zoneHelper.createObservable(function (observer) { return _this.fbAuth.onAuthStateChanged(observer); }), function (user) { return user ? new FirebaseUser(user, _this.app) : null; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param code
     * @returns {Observable<void>} - Returns {@link ActionCodeError} if operation fails.
     */
    FirebaseAuth.prototype.applyActionCode = function (code) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.applyActionCode(code); });
    };
    /**
     * @param code
     * @returns {Observable<ActionCodeInfo>} - Returns {@link ActionCodeError} if operation fails.
     */
    FirebaseAuth.prototype.checkActionCode = function (code) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.checkActionCode(code); });
    };
    /**
     * @param code
     * @param newPassword
     * @returns {Observable<void>} - Returns {@link ConfirmPasswordResetError} if operation fails.
     */
    FirebaseAuth.prototype.confirmPasswordReset = function (code, newPassword) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () {
            return _this.fbAuth.confirmPasswordReset(code, newPassword);
        });
    };
    /**
     *
     * @param email
     * @param password
     * @returns {Observable<FirebaseUser>} - Returns {@link CreateUserWithEmailAndPasswordError} if
     *     operation fails.
     */
    FirebaseAuth.prototype.createUserWithEmailAndPassword = function (email, password) {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () {
            return _this.fbAuth.createUserWithEmailAndPassword(email, password);
        }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     *
     * @param email
     * @returns {Observable<string[]>} - Returns {@link FetchProvidersForEmailError} if operation
     *     fails.
     */
    FirebaseAuth.prototype.fetchProvidersForEmail = function (email) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.fetchProvidersForEmail(email); });
    };
    /**
     * @returns {Observable<FirebaseUserCredential>} - Returns {@link GetRedirectResultError} if
     *     operation fails.
     */
    FirebaseAuth.prototype.getRedirectResult = function () {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.getRedirectResult(); }), function (cred) { return new FirebaseUserCredential(cred, _this.app); });
    };
    /**
     * @param email
     * @returns {Observable<void>} - Returns {@link SendPasswordResetEmailError} if operation fails.
     */
    FirebaseAuth.prototype.sendPasswordResetEmail = function (email) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.sendPasswordResetEmail(email); });
    };
    /**
     *
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInAnonymouslyError} if operation
     *     fails.
     */
    FirebaseAuth.prototype.signInAnonymously = function () {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signInAnonymously(); }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @param credential
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithCredentialError} if operation
     *     fails.
     */
    FirebaseAuth.prototype.signInWithCredential = function (credential) {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signInWithCredential(credential); }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @param token
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithCustomTokenError} if operation
     *     fails.
     */
    FirebaseAuth.prototype.signInWithCustomToken = function (token) {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signInWithCustomToken(token); }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @param email
     * @param password
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithEmailAndPasswordError} if
     *     operation fails.
     */
    FirebaseAuth.prototype.signInWithEmailAndPassword = function (email, password) {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () {
            return _this.fbAuth.signInWithEmailAndPassword(email, password);
        }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @param provider
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithPopupError} if operation fails.
     */
    FirebaseAuth.prototype.signInWithPopup = function (provider) {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signInWithPopup(provider); }), function (cred) { return new FirebaseUserCredential(cred, _this.app); });
    };
    /**
     * @param provider
     * @returns {Observable<FirebaseUser>} - Returns {@link SignInWithRedirectError} if operation
     *     fails.
     */
    FirebaseAuth.prototype.signInWithRedirect = function (provider) {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signInWithRedirect(provider); }), function (cred) { return new FirebaseUserCredential(cred, _this.app); });
    };
    FirebaseAuth.prototype.signOut = function () {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.signOut(); });
    };
    /**
     *
     * @param code
     * @returns {Observable<string>} - Returns {@link VerifyPasswordResetCodeError} if operation
     * fails.
     */
    FirebaseAuth.prototype.verifyPasswordResetCode = function (code) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.fbAuth.verifyPasswordResetCode(code); });
    };
    return FirebaseAuth;
}());
export { FirebaseAuth };
//# sourceMappingURL=auth.js.map