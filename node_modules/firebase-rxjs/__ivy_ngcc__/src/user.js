import { map } from 'rxjs/operator/map';
var FirebaseUserCredential = (function () {
    function FirebaseUserCredential(cred, app) {
        this.credential = cred.credential || undefined;
        this.user = cred.user ? new FirebaseUser(cred.user, app) : undefined;
    }
    return FirebaseUserCredential;
}());
export { FirebaseUserCredential };
var FirebaseUser = (function () {
    function FirebaseUser(user, app) {
        this.user = user;
        this.app = app;
    }
    Object.defineProperty(FirebaseUser.prototype, "displayName", {
        get: function () {
            return this.user.displayName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "email", {
        get: function () {
            return this.user.email;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "emailVerified", {
        get: function () {
            return this.user.emailVerified;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "isAnonymous", {
        get: function () {
            return this.user.isAnonymous;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "photoURL", {
        get: function () {
            return this.user.photoURL;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "providerData", {
        get: function () {
            return this.user.providerData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "providerId", {
        get: function () {
            return this.user.providerId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "refreshToken", {
        get: function () {
            return this.user.refreshToken;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseUser.prototype, "uid", {
        get: function () {
            return this.user.uid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @returns {Observable<void>} - Returns {@link DeleteUserError} if operation fails.
     */
    FirebaseUser.prototype.delete = function () {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.delete(); });
    };
    FirebaseUser.prototype.getToken = function (forceRefresh) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.getToken(forceRefresh); });
    };
    /**
     * @returns {Observable<FirebaseUser>} - Returns {@link LinkUserError} if operation fails.
     */
    FirebaseUser.prototype.link = function (credential) {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () { return _this.user.link(credential); }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @returns {Observable<FirebaseUserCredential>} - Returns {@link LinkUserWithPopupError} if
     *     operation fails.
     */
    FirebaseUser.prototype.linkWithPopup = function (provider) {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () { return _this.user.linkWithPopup(provider); }), function (cred) { return new FirebaseUserCredential(cred, _this.app); });
    };
    /**
     * @returns {Observable<FirebaseUserCredential>} - Returns {@link LinkUserWithRedirectError} if
     *     operation fails.
     */
    FirebaseUser.prototype.linkWithRedirect = function (provider) {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () { return _this.user.linkWithRedirect(provider); }), function (cred) { return new FirebaseUserCredential(cred, _this.app); });
    };
    /**
     * @returns {Observable<void>} - Returns {@link ReauthenticateError} if operation
     * fails.
     */
    FirebaseUser.prototype.reauthenticate = function (credential) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.reauthenticate(credential); });
    };
    FirebaseUser.prototype.reload = function () {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.reload(); });
    };
    FirebaseUser.prototype.sendEmailVerification = function () {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.sendEmailVerification(); });
    };
    FirebaseUser.prototype.unlink = function (providerId) {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () { return _this.user.unlink(providerId); }), function (user) { return new FirebaseUser(user, _this.app); });
    };
    /**
     * @returns {Observable<void>} - Returns {@link UpdateEmailError} if operation
     * fails.
     */
    FirebaseUser.prototype.updateEmail = function (newEmail) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.updateEmail(newEmail); });
    };
    /**
     * @returns {Observable<void>} - Returns {@link UpdatePasswordError} if operation
     * fails.
     */
    FirebaseUser.prototype.updatePassword = function (newPassword) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.updatePassword(newPassword); });
    };
    FirebaseUser.prototype.updateProfile = function (profile) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this.user.updateProfile(profile); });
    };
    return FirebaseUser;
}());
export { FirebaseUser };
//# sourceMappingURL=user.js.map