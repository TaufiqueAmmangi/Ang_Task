var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { database } from 'firebase';
import { of } from 'rxjs/observable/of';
import { map } from 'rxjs/operator/map';
import { mapTo } from 'rxjs/operator/mapTo';
import { makeDataSnapshotObservable } from './data-snapshot-observable';
/**
 * Enum of event types.
 */
var Event = (function () {
    function Event() {
    }
    return Event;
}());
export { Event };
Event.Value = 'value';
Event.ChildAdded = 'child_added';
Event.ChildChanged = 'child_changed';
Event.ChildRemoved = 'child_removed';
Event.ChildMoved = 'child_moved';
var FirebaseQuery = (function () {
    function FirebaseQuery(_ref, app) {
        this._ref = _ref;
        this.app = app;
    }
    Object.defineProperty(FirebaseQuery.prototype, "ref", {
        get: function () {
            return this.wrappedRef;
        },
        enumerable: true,
        configurable: true
    });
    FirebaseQuery.prototype.orderByChild = function (child) {
        this._call('orderByChild', child);
        return this;
    };
    FirebaseQuery.prototype.orderByKey = function () {
        this._call('orderByKey');
        return this;
    };
    FirebaseQuery.prototype.orderByPriority = function () {
        this._call('orderByPriority');
        return this;
    };
    FirebaseQuery.prototype.orderByValue = function () {
        this._call('orderByValue');
        return this;
    };
    FirebaseQuery.prototype.startAt = function (value, key) {
        this._call('startAt', value, key);
        return this;
    };
    FirebaseQuery.prototype.endAt = function (value, key) {
        this._call('endAt', value, key);
        return this;
    };
    FirebaseQuery.prototype.equalTo = function (value, key) {
        this._call('equalTo', value, key);
        return this;
    };
    FirebaseQuery.prototype.limitToFirst = function (limit) {
        this._call('limitToFirst', limit);
        return this;
    };
    FirebaseQuery.prototype.limitToLast = function (limit) {
        this._call('limitToLast', limit);
        return this;
    };
    FirebaseQuery.prototype.once = function (event) {
        return makeDataSnapshotObservable(this._once(event));
    };
    FirebaseQuery.prototype.onceValue = function () {
        return this.once('value');
    };
    FirebaseQuery.prototype.onceChildAdded = function () {
        return this.once('child_added');
    };
    FirebaseQuery.prototype.onceChildChanged = function () {
        return this.once('child_changed');
    };
    FirebaseQuery.prototype.onceChildMoved = function () {
        return this.once('child_moved');
    };
    FirebaseQuery.prototype.onceChildRemoved = function () {
        return this.once('child_removed');
    };
    FirebaseQuery.prototype.on = function (event) {
        return makeDataSnapshotObservable(this._on(event));
    };
    FirebaseQuery.prototype.onValue = function () {
        return this.on('value');
    };
    FirebaseQuery.prototype.onChildAdded = function () {
        return this.on('child_added');
    };
    FirebaseQuery.prototype.onChildChanged = function () {
        return this.on('child_changed');
    };
    FirebaseQuery.prototype.onChildMoved = function () {
        return this.on('child_moved');
    };
    FirebaseQuery.prototype.onChildRemoved = function () {
        return this.on('child_removed');
    };
    FirebaseQuery.prototype.isEqual = function (query) {
        return this.getQueryOrRef().isEqual(query.getQueryOrRef());
    };
    FirebaseQuery.prototype._once = function (event) {
        var _this = this;
        return map.call(this.app.zoneHelper.wrapPromise(function () { return _this.getQueryOrRef().once(event); }), function (nativeSnapshot) { return _this.makeDataSnapshot(nativeSnapshot); });
    };
    FirebaseQuery.prototype._on = function (event) {
        var _this = this;
        return this.app.zoneHelper.createObservable(function (sub) {
            var cb = _this.getQueryOrRef().on(event, _this.getEventHandler(sub), function (err) { return sub.error(err); });
            return function () { return _this.getQueryOrRef().off(event, cb); };
        });
    };
    FirebaseQuery.prototype.makeDataSnapshot = function (snapshot, prevKey) {
        var _this = this;
        if (typeof prevKey !== 'undefined') {
            snapshot.prevKey = prevKey;
        }
        Object.defineProperty(snapshot, 'ref', {
            get: function () { return _this; }
        });
        return snapshot;
    };
    FirebaseQuery.prototype.getEventHandler = function (sub, complete) {
        var _this = this;
        return function (snapshot, prevKey) {
            sub.next(_this.makeDataSnapshot(snapshot, prevKey));
            if (complete) {
                sub.complete();
            }
        };
    };
    FirebaseQuery.prototype.getQueryOrRef = function () {
        if (this.query) {
            return this.query;
        }
        return this._ref;
    };
    FirebaseQuery.prototype._call = function (fnName) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.app.zoneHelper.runInFirebase(function () {
            if (_this.query) {
                _this.query = (_a = _this.query)[fnName].apply(_a, args);
            }
            else {
                _this.query = (_b = _this._ref)[fnName].apply(_b, args);
            }
            var _a, _b;
        });
    };
    return FirebaseQuery;
}());
export { FirebaseQuery };
var FirebaseDatabaseRef = (function (_super) {
    __extends(FirebaseDatabaseRef, _super);
    function FirebaseDatabaseRef(parent, ref, app) {
        var _this = _super.call(this, ref, app) || this;
        _this.parent = parent;
        _this.wrappedRef = _this;
        return _this;
    }
    Object.defineProperty(FirebaseDatabaseRef.prototype, "key", {
        get: function () {
            return this._ref.key;
        },
        enumerable: true,
        configurable: true
    });
    FirebaseDatabaseRef.prototype.child = function (path) {
        return new FirebaseDatabaseRef(this, this._ref.child(path), this.app);
    };
    FirebaseDatabaseRef.prototype.set = function (value) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this._ref.set(value); });
    };
    FirebaseDatabaseRef.prototype.setPriority = function (priority) {
        var _this = this;
        // There seems to be a bug with the typing for #setPriority(priority, onComplete): Promise
        // The firebase library, in every other case, declares the onComplete function optional since a
        // Promise is returned as well.
        return this.app.zoneHelper.wrapPromise(function () { return _this._ref.setPriority(priority); });
    };
    FirebaseDatabaseRef.prototype.setWithPriority = function (newVal, priority) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this._ref.setWithPriority(newVal, priority); });
    };
    FirebaseDatabaseRef.prototype.push = function (value) {
        var pushRef = this._ref.push(value);
        var ref = new FirebaseDatabaseRef(this, pushRef, this.app);
        // Only if a value to push was given, use ref as promise, since otherwise
        // pushRef.then will be undefined
        if (value) {
            return mapTo.call(this.app.zoneHelper.wrapPromise(function () { return pushRef; }), ref);
        }
        return of(ref);
    };
    FirebaseDatabaseRef.prototype.update = function (value) {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this._ref.update(value); });
    };
    FirebaseDatabaseRef.prototype.remove = function () {
        var _this = this;
        return this.app.zoneHelper.wrapPromise(function () { return _this._ref.remove(); });
    };
    FirebaseDatabaseRef.prototype.transaction = function (transactionHandler, applyLocally) {
        var _this = this;
        if (Zone) {
            transactionHandler = this.app.zoneHelper.wrap(transactionHandler, 'firebaseRxJS.transaction');
        }
        return this.app.zoneHelper.wrapPromise(function () { return new Promise(function (resolve, reject) { return _this._ref.transaction(transactionHandler, function (err, committed, snapshot) {
            return err ? reject(err) : resolve({
                committed: committed,
                snapshot: _this.makeDataSnapshot(snapshot)
            });
        }, applyLocally); }); });
    };
    return FirebaseDatabaseRef;
}(FirebaseQuery));
export { FirebaseDatabaseRef };
/**
 * A special object with information about the connection between client and server which can be
 * accessed by using `db.ref('.info')`.
 */
var InfoSchema = (function () {
    function InfoSchema() {
    }
    return InfoSchema;
}());
export { InfoSchema };
var FirebaseDatabase = (function () {
    function FirebaseDatabase(db, app) {
        this.db = db;
        this.app = app;
    }
    FirebaseDatabase.prototype.ref = function (path) {
        return new FirebaseDatabaseRef(null, this.db.ref(path), this.app);
    };
    return FirebaseDatabase;
}());
export { FirebaseDatabase };
/**
 * A collection of special constants which can be used when writing data. Their values will be
 * substituted on the server with server generated values.
 * E.g {@link FirebaseDatabase.ServerValue.TIMESTAMP} will be substituted for the server time
 * when committing a write.
 */
FirebaseDatabase.ServerValue = database.ServerValue;
//# sourceMappingURL=database.js.map